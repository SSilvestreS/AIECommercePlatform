name: AIECommerce Platform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [8.0.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Restore dependencies
      run: dotnet restore AIECommercePlatform.sln
      
    - name: Build solution
      run: dotnet build AIECommercePlatform.sln --no-restore --configuration Release
      
    - name: Run unit tests
      run: dotnet test tests/AIECommerce.Tests.Unit/AIECommerce.Tests.Unit.csproj --no-build --verbosity normal --configuration Release
      
    - name: Run integration tests
      run: dotnet test tests/AIECommerce.Tests.Integration/AIECommerce.Tests.Integration.csproj --no-build --verbosity normal --configuration Release
      
    - name: Generate test coverage report
      run: |
        dotnet test --collect:"XPlat Code Coverage" --results-directory ./coverage
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:./coverage/**/coverage.cobertura.xml -targetdir:./coverage/report -reporttypes:HtmlInline_AzurePipelines_Dark;Cobertura
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/report/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mlflow tensorflow scikit-learn pandas numpy matplotlib seaborn
        
    - name: Run ML tests
      run: |
        cd ml
        python -m pytest tests/ -v --cov=src --cov-report=xml
        
    - name: Upload ML coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./ml/coverage.xml
        flags: ml
        name: codecov-ml

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'AIECommerce Platform'
        path: '.'
        format: 'HTML'
        out: 'reports'
        args: >
          --failOnCVSS 7
          --enableRetired
          
    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push API Gateway
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.Gateway
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push ML Recommendation Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.RecommendationService
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ml-recommendation:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push ML Sentiment Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.SentimentService
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ml-sentiment:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push ML Fraud Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.FraudService
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ml-fraud:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push ML Demand Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.DemandService
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ml-demand:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Catalog Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.CatalogService
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/catalog:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Order Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.OrderService
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/order:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Identity Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.IdentityService
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/identity:${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo add elastic https://helm.elastic.co
        helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
        helm repo update
        
        helm upgrade --install aiecommerce-staging ./helm/aiecommerce \
          --namespace aiecommerce-staging \
          --create-namespace \
          --set global.environment=staging \
          --set global.domain=staging.aiecommerce.com \
          --wait --timeout 10m

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo add elastic https://helm.elastic.co
        helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
        helm repo update
        
        helm upgrade --install aiecommerce ./helm/aiecommerce \
          --namespace aiecommerce \
          --create-namespace \
          --set global.environment=production \
          --set global.domain=aiecommerce.com \
          --wait --timeout 15m
          
    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        # Add smoke test commands here
        kubectl get pods -n aiecommerce
        kubectl get services -n aiecommerce
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "🚀 Production deployment successful!"
        # Add notification logic here (Slack, Teams, etc.)
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Production deployment failed!"
        # Add notification logic here (Slack, Teams, etc.)

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Artillery
      run: npm install -g artillery
        
    - name: Run performance tests
      run: |
        artillery run performance-tests/load-test.yml
        artillery run performance-tests/stress-test.yml
        
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: performance-tests/results/

  # ML Model Validation
  ml-validation:
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install ML dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mlflow tensorflow scikit-learn pandas numpy pytest
        
    - name: Validate ML models
      run: |
        cd ml
        python -m pytest validation/ -v
        
    - name: Run ML model tests
      run: |
        cd ml
        python -m pytest tests/ -v --cov=src --cov-report=xml
        
    - name: Upload ML validation results
      uses: actions/upload-artifact@v3
      with:
        name: ml-validation-results
        path: ml/validation/results/
